package io.analytics.platform.common.dto;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.analytics.platform.common.exception.ValidationException;
import jakarta.validation.constraints.*;

/**
 * Represents an alert generated by the rule engine when specific conditions are met.
 *
 * <p>An alert must have a non-null rule ID, a non-empty message, and a valid severity level. The
 * severity must be one of the predefined values: CRITICAL, HIGH, MEDIUM, or LOW.
 *
 * @param ruleId Unique identifier of the rule that triggered this alert, must not be blank
 * @param message Human-readable description of the alert, must not be blank
 * @param severity Severity level of the alert, must be one of: CRITICAL, HIGH, MEDIUM, LOW
 * @throws ValidationException if any validation constraints are violated
 */
@JsonIgnoreProperties(ignoreUnknown = true)
public record AlertEvent(
    @NotBlank(message = "Rule ID cannot be blank")
        @Size(max = 100, message = "Rule ID cannot exceed 100 characters")
        @JsonProperty("ruleId")
        String ruleId,
    @NotBlank(message = "Alert message cannot be blank")
        @Size(max = 1000, message = "Alert message cannot exceed 1000 characters")
        @JsonProperty("message")
        String message,
    @NotBlank(message = "Severity cannot be blank") @JsonProperty("severity") String severity) {
  /**
   * Predefined severity levels for alerts.
   *
   * <p>Only these values are considered valid: {@code CRITICAL}, {@code HIGH}, {@code MEDIUM},
   * {@code LOW}.
   */
  public enum Severity {
    CRITICAL,
    HIGH,
    MEDIUM,
    LOW;

    /**
     * Parse a string into a Severity enum, normalizing case.
     *
     * @param value input string
     * @return Severity enum
     * @throws ValidationException if the value is invalid
     */
    public static Severity from(String value) {
      try {
        return value == null ? null : Severity.valueOf(value.trim().toUpperCase());
      } catch (IllegalArgumentException e) {
        throw new ValidationException(
            "Invalid severity level. Must be one of: CRITICAL, HIGH, MEDIUM, LOW");
      }
    }

    /**
     * Checks if the given string is a valid severity.
     *
     * @param value the severity string to check
     * @return true if valid, false otherwise
     */
    public static boolean isValid(String value) {
      try {
        from(value);
        return true;
      } catch (ValidationException e) {
        return false;
      }
    }
  }

  /**
   * Validates this alert against all constraints.
   *
   * @throws ValidationException if the alert is invalid
   */
  public void validate() {
    try {
      if (ruleId == null || ruleId.trim().isEmpty()) {
        throw new ValidationException("Rule ID cannot be blank");
      }
      if (ruleId.length() > 100) {
        throw new ValidationException("Rule ID cannot exceed 100 characters");
      }

      if (message == null || message.trim().isEmpty()) {
        throw new ValidationException("Alert message cannot be blank");
      }
      if (message.length() > 1000) {
        throw new ValidationException("Alert message cannot exceed 1000 characters");
      }

      if (severity == null || severity.trim().isEmpty()) {
        throw new ValidationException("Severity cannot be blank");
      }
      if (!Severity.isValid(severity)) {
        throw new ValidationException(
            "Invalid severity level. Must be one of: CRITICAL, HIGH, MEDIUM, LOW");
      }

    } catch (NullPointerException e) {
      throw new ValidationException(e.getMessage(), e);
    }
  }

  /**
   * Factory method to create an AlertEvent with case-insensitive severity.
   *
   * @param ruleId the rule ID that triggered the alert
   * @param message the alert message
   * @param severity the severity level (case-insensitive)
   * @return validated AlertEvent
   * @throws ValidationException if invalid
   */
  @JsonCreator
  public static AlertEvent of(
      @JsonProperty("ruleId") String ruleId,
      @JsonProperty("message") String message,
      @JsonProperty("severity") String severity) {
    String normalized = severity != null ? severity.trim().toUpperCase() : null;
    AlertEvent alert = new AlertEvent(ruleId, message, normalized);
    alert.validate();
    return alert;
  }

  /**
   * Factory method to create an AlertEvent using the {@link Severity} enum.
   *
   * @param ruleId the rule ID
   * @param message the alert message
   * @param severity the severity enum
   * @return validated AlertEvent
   * @throws ValidationException if invalid
   */
  public static AlertEvent of(String ruleId, String message, Severity severity) {
    return of(ruleId, message, severity != null ? severity.name() : null);
  }

  /**
   * Convert the string severity to its enum representation.
   *
   * @return Severity enum
   * @throws ValidationException if severity is invalid
   */
  public Severity getSeverityEnum() {
    return Severity.from(severity);
  }
}
